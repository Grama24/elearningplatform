// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id          String  @id @default(uuid()) @map("_id")
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  attachments  Attachment[]
  purchases    Purchase[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  chapters     Chapter[]
  certificates Certificate[]
  finalQuiz    FinalQuiz?

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(uuid()) @map("_id")
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid()) @map("_id")
  name String
  url  String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid()) @map("_id")
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid()) @map("_id")
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid()) @map("_id")
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid()) @map("_id")
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid()) @map("_id")
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificate {
  id           String   @id @default(uuid()) @map("_id")
  courseId     String
  userId       String
  courseName   String
  categoryName String?
  blockchainTx String?
  txStatus     String?
  txError      String?
  issuedAt     DateTime @default(now())

  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
  @@index([userId])
}

model FinalQuiz {
  id        String         @id @default(uuid()) @map("_id")
  courseId  String         @unique
  course    Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  minScore  Int
  questions QuizQuestion[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model QuizQuestion {
  id          String       @id @default(uuid()) @map("_id")
  text        String
  finalQuizId String
  finalQuiz   FinalQuiz    @relation(fields: [finalQuizId], references: [id], onDelete: Cascade)
  answers     QuizAnswer[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model QuizAnswer {
  id         String       @id @default(uuid()) @map("_id")
  text       String
  isCorrect  Boolean
  questionId String
  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model FinalQuizResult {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  courseId  String
  score     Int
  isPassed  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}
